name: Build and Deploy OpenAI App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: my-sample-app
  EKS_CLUSTER_NAME: demo-eks-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Check current namespace and list deployments
      run: |
        echo "Current namespace:"
        kubectl config view --minify --output 'jsonpath={..namespace}'
        echo "\nAll deployments:"
        kubectl get deployments --all-namespaces

    - name: Create or update deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        if ! kubectl get deployment openai-app; then
          echo "Deployment not found. Creating it..."
          kubectl create deployment openai-app --image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl set env deployment/openai-app OPENAI_API_KEY=$(kubectl get secret openai-secret -o jsonpath='{.data.OPENAI_API_KEY}' | base64 --decode)
          echo "Waiting for deployment to be ready..."
          kubectl rollout status deployment/openai-app --timeout=60s
        else
          echo "Deployment already exists."
        fi

    - name: Update Kubernetes deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        CONTAINER_NAME=$(kubectl get deployment openai-app -o jsonpath='{.spec.template.spec.containers[0].name}')
        kubectl set image deployment/openai-app ${CONTAINER_NAME}=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Apply Kubernetes service
      run: |
        kubectl apply -f k8s/services/openai-app-service.yaml

    - name: Update OpenAI API Key in Kubernetes Secret
      run: |
        kubectl create secret generic openai-secret --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/openai-app --timeout=300s

    - name: Debug deployment
      if: failure()
      run: |
        echo "Deployment status:"
        kubectl get deployment openai-app
        echo "Pod status:"
        kubectl get pods -l app=openai-app
        echo "Pod logs:"
        kubectl logs -l app=openai-app --all-containers --tail=100
        echo "Recent events:"
        kubectl get events --sort-by=.metadata.creationTimestamp

    - name: Get Service URL
      if: success()
      run: |
        echo "Service URL:"
        kubectl get service openai-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
